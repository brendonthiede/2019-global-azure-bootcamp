{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "storageAccountPrefix": {
            "type": "string",
            "maxLength": 11,
            "metadata": {
                "description": "Specifies the prefix to use in the name of the Azure Storage account, which is prepended to a uniquestring."
            }
        },
        "appContainerName": {
            "type": "string",
            "metadata": {
                "description": "Specifies the name of the blob container for the static app."
            }
        },
        "imageContainerName": {
            "type": "string",
            "metadata": {
                "description": "Specifies the name of the blob container for storing the images."
            }
        },
        "thumbnailsContainerName": {
            "type": "string",
            "metadata": {
                "description": "Specifies the name of the blob container for storing the thumbnails."
            }
        },
        "functionAppPrefix": {
            "type": "string",
            "defaultValue": "bootcamp-functions",
            "metadata": {
                "description": "Specifies the prefix to use in the name of the function app, which is prepended to a uniquestring."
            }
        },
        "cosmosDbAccountNamePrefix": {
            "type": "string",
            "defaultValue": "bootcamp-cosmos",
            "metadata": {
                "description": "Specifies the prefix to use in the name of the cosmos db account, which is prepended to a uniquestring."
            }
        },
        "cosmosDbApiType": {
            "type": "string",
            "allowedValues": [
                "Cassandra",
                "Gremlin",
                "MongoDB",
                "SQL",
                "Table"
            ],
            "defaultValue": "SQL",
            "metadata": {
                "description": "Specifies which driver to configure Cosmos DB to use."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Specifies the location in which the Azure Storage resources should be deployed."
            }
        }
    },
    "variables": {
        "storageApiVersion": "2019-04-01",
        "storageAccountName": "[concat(parameters('storageAccountPrefix'), uniqueString(subscription().subscriptionId))]",
        "storageSku": "Standard_LRS",
        "workshopStage": "4",
        "functionAppName": "[concat(parameters('functionAppPrefix'), '-', uniqueString(subscription().subscriptionId))]",
        "cosmosDbAccountName": "[concat(parameters('cosmosDbAccountNamePrefix'), '-', uniqueString(subscription().subscriptionId), '-cosmosdb')]",
        "cosmosDbAccountKind": "[if(equals(parameters('cosmosDbApiType'), 'MongoDB'), 'MongoDB', 'GlobalDocumentDB')]"
    },
    "resources": [
        {
            "name": "[variables('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "location": "[parameters('location')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "sku": {
                "name": "[variables('storageSku')]"
            },
            "kind": "StorageV2",
            "tags": {
                "workshopStage": "[variables('workshopStage')]"
            },
            "properties": {
                "accessTier": "Hot"
            },
            "resources": [
                {
                    "name": "[concat('default/', parameters('appContainerName'))]",
                    "type": "blobServices/containers",
                    "apiVersion": "[variables('storageApiVersion')]",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ]
                },
                {
                    "name": "[concat('default/', parameters('imageContainerName'))]",
                    "type": "blobServices/containers",
                    "apiVersion": "[variables('storageApiVersion')]",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ],
                    "properties": {
                        "publicAccess": "Blob"
                    }
                },
                {
                    "name": "[concat('default/', parameters('thumbnailsContainerName'))]",
                    "type": "blobServices/containers",
                    "apiVersion": "[variables('storageApiVersion')]",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ],
                    "properties": {
                        "publicAccess": "Blob"
                    }
                }
            ]
        },
        {
            "name": "[variables('functionAppName')]",
            "type": "Microsoft.Web/sites",
            "properties": {
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId(subscription().subscriptionId,resourceGroup().name,'Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "AZURE_STORAGE_CONNECTION_STRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId(subscription().subscriptionId,resourceGroup().name,'Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~1"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId(subscription().subscriptionId,resourceGroup().name,'Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[concat(toLower(variables('functionAppName')), 'app')]"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "10.14.1"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components/', variables('functionAppName')), '2015-05-01').InstrumentationKey]"
                        }
                    ]
                },
                "name": "[variables('functionAppName')]",
                "clientAffinityEnabled": false,
                "reserved": false
            },
            "dependsOn": [
                "[resourceId('microsoft.insights/components/', variables('functionAppName'))]",
                "[variables('storageAccountName')]"
            ],
            "apiVersion": "2016-03-01",
            "location": "[parameters('location')]",
            "kind": "functionapp"
        },
        {
            "type": "Microsoft.Insights/components",
            "name": "[variables('functionAppName')]",
            "apiVersion": "2014-04-01",
            "location": "[parameters('location')]",
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('functionAppName'))]": "Resource",
                "workshopStage": "[variables('workshopStage')]"
            },
            "properties": {
                "applicationId": "[variables('functionAppName')]",
                "Request_Source": "AzureTfsExtensionAzureProject"
            }
        },
        {
            "comments": "Cosmos DB instance.",
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "kind": "[variables('cosmosDbAccountKind')]",
            "name": "[variables('cosmosDbAccountName')]",
            "apiVersion": "2015-04-08",
            "location": "[resourceGroup().location]",
            "scale": "",
            "properties": {
                "name": "[variables('cosmosDbAccountName')]",
                "databaseAccountOfferType": "Standard",
                "capabilities": [
                    {
                        "name": "[if(equals(parameters('cosmosDbApiType'), 'Cassandra'), 'EnableCassandra', if(equals(parameters('cosmosDbApiType'), 'Gremlin'), 'EnableGremlin', if(equals(parameters('cosmosDbApiType'), 'MongoDB'), '', if(equals(parameters('cosmosDbApiType'), 'SQL'), '', if(equals(parameters('cosmosDbApiType'), 'Table'), 'EnableTable', '')))))]"
                    }
                ]
            },
            "tags": {
                "defaultExperience": "[if(equals(parameters('cosmosDbApiType'), 'Cassandra'), 'Cassandra', if(equals(parameters('cosmosDbApiType'), 'Gremlin'), 'Graph', if(equals(parameters('cosmosDbApiType'), 'MongoDB'), 'MongoDB', if(equals(parameters('cosmosDbApiType'), 'SQL'), 'DocumentDB', if(equals(parameters('cosmosDbApiType'), 'Table'), 'Table', '')))))]"
            },
            "dependsOn": []
        }
    ],
    "outputs": {
        "storageAccountName": {
            "type": "string",
            "value": "[variables('storageAccountName')]"
        },
        "storageAccountBlobEndpoint": {
            "type": "string",
            "value": "[reference(variables('storageAccountName')).primaryEndpoints.blob]"
        },
        "functionAppName": {
            "type": "string",
            "value": "[variables('functionAppName')]"
        },
        "hostNames": {
            "type": "array",
            "value": "[reference(resourceId('Microsoft.Web/Sites', variables('functionAppName'))).hostNames]"
        },
        "defaultHostName": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Web/Sites', variables('functionAppName'))).defaultHostName]"
        },
        "CosmosDbUri": {
            "type": "string",
            "value": "[reference(concat('Microsoft.DocumentDb/databaseAccounts/', variables('cosmosDbAccountName'))).documentEndpoint]"
        },
        "CosmosDbKey": {
            "type": "string",
            "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName')), '2015-04-08').primaryMasterKey]"
        }
    }
}